#include <iostream>
#include <fstream>
#include <windows.h>	// for Sleep
#include <time.h>		// for time (random function)
#include "Word.h"
#include <graphics.h>
using namespace std;

// The first screen of the game, where you click Start Game in order to play.
void Word::GraphicsStartGame()
{
    cout << "H A N G M A N"<< endl;
    cout << endl;
    cout <<"Press START GAME to play!" << endl;
    int x=-1,y=-1;
    initwindow (900, 600, "HANGMAN", 450, 150, false,true);
    readimagefile("Title.jpg",200,150,660,200);
    readimagefile("ButtonStartGame.jpg",260,280,600,320);    //start button

     while(true)
     {
         while(!ismouseclick(WM_LBUTTONDOWN))
        {
            delay(500);
        }
        getmouseclick(WM_LBUTTONDOWN,x,y);
        if((x>=260 && x<=600)&&(y>=280 && y<=320))
        {
            GraphicsChoosePlayersNumber();
            return;
        }
     }
}

//2 buttons for choosing the number of players will appear on the screen (called by GraphicsStartGame)
void Word::GraphicsChoosePlayersNumber()
{
    system("CLS");
    cout << "Choose the number of players!" <<endl;
    int x=-1,y=-1;
    cleardevice();
    //readimagefile("Background.jpg",0,0,900,600);
    readimagefile("Title.jpg",200,150,660,200);
    readimagefile("Button1Player.jpg",260,260,600,300);    //1 player button
    readimagefile("Button2Players.jpg",260,340,600,300);    //2 players button

    while(true)
    {
        while(!ismouseclick(WM_LBUTTONDOWN))
        {
            delay(500);
        }
        getmouseclick(WM_LBUTTONDOWN,x,y);
        //first button
        if(x>=260 && x<=600)
        {
            if(y>=260 && y<=300)
            {
                players=1;
                StartGame();
                return;
            }
        }
        //second button
        if(x>=260 && x<=600)
        {
            if(y>=340 && y<=370)
            {
                players=2;
                StartGame();
                return;
            }
        }
    }
}

// Creates new game, prints to console (it's called by GraphicsChoosePlayersNumber())
void Word::StartGame()
{
	/*cout << "1 or 2 players?\n";
	if (players > 2 || players < 1)
	{
		cout << "Please choose 1 or 2!\n";
		cin >> players;
	}
    */
	lives = 6;
	game_over = 0;
	badletters.clear();
	goodletters.clear();
	language = 0;
	wizard = 0;
	fairy = 0;

    system("CLS");

	if (players == 1)
	{
		cout << "Choose your language: \n";
		cout << "1 - English\n";
		cout << "2 - Romanian\n";
		cin >> language;
		if (language > 2 || language < 1)
		{
			cout << "Please choose 1 or 2!\n";
			while(language>2 || language < 1)
                cin >> language;
		}
		cout << "The computer will choose a random word for you!\n";
		OnePlayer();
	}
	else
	{
		Word myWord;
		cout << "Player 1 has to type a word:\n";
		myWord.ReadWord();
		myWord.Game();
	}
}

// generates a random number between the range: [min,max]
int Random(int min, int max)
{
	static bool first = true;
	if (first)
	{
		srand(time(NULL)); //seeding for the first time only!
		first = false;
	}
	return min + rand() % ((max + 1) - min);
}

// function that will be used in OnePlayer()
// gets the word generated by the computer and gives it to the string myWord that we're using in the game
void Word::AssignGeneratedWord(string s)
{
	myWord = s;
	//Convert into big letters:
	for (int i = 0;i < int(myWord.size());++i)
	{
		if (myWord[i] >= 'a' && myWord[i] <= 'z')
			myWord[i] = myWord[i] - 32;
	}
	CreateHiddenWord();
}

// used for 1 player only, reads from language files.
void Word::OnePlayer()
{
	int randomNumber = Random(2, 151);	// we have 150 words in both lists
	int count = 0;
	lives = 6;

	string generatedWord;
	ifstream f;
	if(language == 1) f.open("ENGLISH.txt");
	else  f.open("ROMANA.txt");
	while (getline(f, generatedWord))
	{
		count++;
		if (count == randomNumber)
		{
			AssignGeneratedWord(generatedWord);
			Game();
			break;
		}
	}
	f.close();
}

// used for 2 players only
void Word::ReadWord()
{
	cin >> myWord;
	while (myWord.size() < 3)
	{
		cout << "Please choose a word longer than 2 letters!\n";
		cin >> myWord;
	}

	//Convert into big letters:
	for (int i = 0;i < int(myWord.size());++i)
	{
		if (myWord[i] >= 'a' && myWord[i] <= 'z')
			myWord[i] = myWord[i] - 32;
	}

	CreateHiddenWord();
}

void Word::PrintWord()
{
	for (int i = 0;i < int(myWord.size());i++)
		cout << myWord[i] << ' ';
	cout << endl;
}

void Word::CreateHiddenWord()
{
	//if the word is LAPTOP, the hidden word will be L _ P _ _ P
	int length = myWord.size() - 1;
	hiddenWord = myWord;

	for (int i = 1;i < length;++i)
	{
		if (!((myWord[i] == hiddenWord[0]) || (myWord[i] == hiddenWord[length])))
			hiddenWord[i] = '_';
	}
	goodletters.push_back(hiddenWord[0]);
	if (hiddenWord[0] != hiddenWord[length])
		goodletters.push_back(hiddenWord[length]);
}

void Word::PrintHiddenWord()
{
	for (int i = 0;i < int(hiddenWord.size());i++)
		cout << hiddenWord[i] << ' ';
	cout << endl;
}

void Word::GetLetter()
{
	if (lives == 0)
		Finish();
	else
	{
		cout << "Choose a letter: \n";

		char l;
		cin >> l;
		if (l >= 'a' && l <= 'z')
			l = l - 32;	// convert into big letter

		letter = l;
		TryLetter();
	}
}

// checks if the chosen letter is good/bad/has already been chosen
void Word::TryLetter()
{
	if (lives != 0)
	{
		if (CompareWords())
			Finish();
		else
		{
			if ((letter == myWord[0]) || (letter == myWord[myWord.size() - 1]))
			{
				cout << "This letter has already been chosen. Please try another one!\n";
				GetLetter();
			}
			for (int i = 0;i < int(myWord.size());i++)
				if (letter == myWord[i])
				{
					GoodLetter();
					return;
				}
			BadLetter();
		}
	}
	else
    {
        Finish();
    }

	return;
}

void Word::GoodLetter()
{
	for (int i = 0;i < int(goodletters.size());i++)
		if(goodletters[i]==letter)
		{
			cout << "This letter has already been chosen. Please try another one!\n";
			GetLetter();
			return;
		}
	for (int i = 0;i < int(myWord.size());i++)
		if (myWord[i] == letter)
		{
			cout << "The letter is correct!\n";
			hiddenWord[i] = letter;
			goodletters.push_back(letter);
			if (CompareWords())
				Finish();
			else
				PrintConsole();
		}
}

void Word::BadLetter()
{
	for (int i = 0;i < int(badletters.size());i++)
		if (badletters[i] == letter)
			{
				if(wizard!=1) cout << "This letter has already been chosen. Please try another one!\n";
				GetLetter();
				return;
			}
	lives--;
	cout << "The letter is not correct. You have " << lives << " more lives.\n";
	badletters.push_back(letter);

	// WIZARD
	wizard = Random(1, 5);
	if (lives <= 3)
	{
		if (wizard == 1)
		{
			lives++;
            readimagefile("wizard.jpg",500,250 ,650,400);
			cout << endl;
			cout << " \t\tWow! A wild wizard appeared and gave you another life!\n";
			cout << " \t\tLives:" << lives << endl;
			wizard = Random(1, 5);
			Sleep(1600);
            delay(2000);
            readimagefile("blackcover.jpg",500,250,650,400); // in order to make the wizard disappear
		}
	}

	//FAIRY
	fairy = Random(1, 2);
	if (lives <= 3 && lives>0 && wizard!=1)
	{
		if (fairy == 1)
		{
            readimagefile("fairy.jpg",500,100,650,250);
			cout << endl;
			cout << " \t\tWow! A fairy came and said:\n";
			cout << "\t\tWhy don't you try the letter " << LetterInWord() << " ? "<<endl;
			fairy = Random(1, 4);
			Sleep(1600);
            delay(2000);
            readimagefile("blackcover.jpg",500,100,650,250);
		}
	}

	if (lives == 0)
		Finish();
	else
		PrintConsole();

}

char Word::LetterInWord()
{
	// for the FAIRY
	// finds a letter in the word that has not yet been chosen
	for (int i = 0;i < (int)myWord.size();i++)
	{
		if (hiddenWord[i] == '_')
			return myWord[i];
	}
}

void Word::PrintBadLetters()
{
	if(badletters.size() != 0) cout << "Bad letters: ";
	for (int i = 0;i < int(badletters.size());i++)
		cout << badletters[i] << ' ';
	cout << endl;
}

void Word::PrintConsole()
{
	Sleep(1500);
	system("CLS");
	cout << endl;
	PrintHiddenWord();
	PrintBadLetters();
	cout << "Lives: " << lives << endl;
}

bool Word::CompareWords()
{
    // if myWord and hiddenWord are equal, it means that the player has won.
    // we will use the function in Finish()
	for (int i = 0; i < int(myWord.size()); i++)
		if (myWord[i] != hiddenWord[i])
				return false;
	return true;
}

void Word::Finish()
{
	bool ok = CompareWords();
	if (ok)
	{
		cout << endl;
		cout << "\t\t\tCongratulations, you won!\n";
		cout << endl;
		cout << "The word is: ";
		PrintWord();
		cout << "You had " << lives << " more lives.\n";
		cout << endl;
		game_over = 1;
		return;
	}
	else
	{
		if (lives == 0)
		{

            DrawMan();
			cout << endl;
			cout << "\t\t\tYou ran out of lives!\n";
			if (players == 2)
				cout << "\t\t\tPlayer 1 wins!\n";
			else
				cout << "\t\t\tThe computer wins!\n";
			cout << endl;
			cout << "The word was: ";
			PrintWord();
			cout << endl;
			game_over = 1;
		}
		else
			TryLetter();
	}

}

void Word::Game()
{
	Sleep(2000);
    DrawHang();
	cout << endl;
	PrintHiddenWord();
	cout << endl;
	while (game_over==0)
	{
        DrawMan();
		GetLetter();
	}
	PlayAgain();
}

void Word::PlayAgain()
{
	cout << "\t\t\tWant to play again?\n";
	cout << "\t\t\tPress 'y' (yes) or 'n' (no)\n";
	char response;
	cin >> response;
	if (response == 'y')
	{
		Sleep(1000);
		system("CLS");
		StartGame();
	}
	else
		exit(0);
}

void Word::DrawHang()
{
    cleardevice();
    //setlinestyle(0,0,3);
	line(90,500,290,500); // ___
    //setlinestyle(0,0,3);
	line(190,500,190,70); // |
	//setlinestyle(0,0,3);
	line(190,70,400,70);  // --
	//setlinestyle(0,0,3);
	line(400,70,400,130); // | small
    //setlinestyle(0,0,3);

}

void Word::DrawMan()
{
    if(lives<6)
    {
        //setlinestyle(0,0,3);
        circle(400, 165, 35);
    }
    if(lives<5)
    {
        //setlinestyle(0,0,3);
        line(400, 200, 400, 325);
    }
    if(lives<4)
    {
        //setlinestyle(0,0,3);
        line(400,220,350,270);
    }
    if(lives<3)
    {
        //setlinestyle(0,0,3);
        line(400,220,450,270);
    }
    if(lives<2)
    {
        //setlinestyle(0,0,3);
        line(400,325,450,375);
    }
    if(lives<1)
    {
        //setlinestyle(0,0,3);
        line(400,325,350,375);
    }
}

Word::Word()
{
}

Word::~Word()
{
}
